#include "MainGame.h"
#include "Camera.h"
#include <iostream>
#include <string>


//Transform transform;

MainGame::MainGame()
    : _gameState(GameState::PLAY), 
	_gameDisplay(new Display()), 
	audioDevice(new Audio()), 
	applause(0), 
	backGroundMusic(0), 
	speed(0.0), 
	rotation (0.0), 
	isBallKicked(false),
	isGoal(false),
	shotRotation(0.0), 
	level(5.0) {}

MainGame::~MainGame() {
	delete _gameDisplay;
	delete audioDevice;
}

void MainGame::run() {
	InitializeSystems();
	Menu();
}

void MainGame::InitializeSystems()
{
	_gameDisplay->InitializeDisplay(); 

	applause = audioDevice->LoadSound("..\\res\\applause.wav");
	backGroundMusic = audioDevice->LoadSound("..\\res\\backgroundMusic.wav"); //FASSounds-Football from pixabay.com
	mesh1.LoadModel("..\\res\\Ball.obj");
	mesh2.LoadModel("..\\res\\goal.obj"); // https://free3d.com/
	mesh4.LoadModel("..\\res\\arrow.obj"); // https://free3d.com/
	ballShader.init("..\\res\\BallShader.vert", "..\\res\\BallShader.frag"); // generated by chatGpt
	bumpShader.init("..\\res\\BumpShader.vert", "..\\res\\BumpShader.frag");
	arrowShader.init("..\\res\\arrowShader.vert", "..\\res\\arrowShader.frag"); // generated by chatGpt
	texture1.Load("..\\res\\ball3.jpg"); // pixabay.com
	texture2.Load("..\\res\\grass.jpg"); // pixabay.com
	texture3.Load("..\\res\\ball3.jpg");
	texture4.Load("..\\res\\textureArrow.jpg");
	texture5.Load("..\\res\\menu.jpg");  // pixabay.com
	texture2normal.LoadNormals("..\\res\\grassNormal.jpg");
	myCamera.InitializeCamera(glm::vec3(2, 1, -4), 70.0f, (float)_gameDisplay->GetWidth()/_gameDisplay->GetHeight(), 0.01f, 1000.0f);
}

void MainGame::Menu()
{
	while (_gameState != GameState::EXIT)
	{
		ProcessInput();
		DrawMenu();
		PlayAudio(backGroundMusic, glm::vec3(0.0f,0.0f,0.0f));
	}
}

void MainGame::Update()
{
	while (_gameState != GameState::EXIT)
	{
		ProcessInput();
		DrawGame();
		Collision(mesh1.GetSpherePos(), mesh1.GetSphereRadius(), mesh2.GetSpherePos(), mesh2.GetSphereRadius());
		myCamera.HandleInput(1.0);
	}
}

void MainGame::RestartGame()
{
	LevelHandler();
	speed = 0.0;
	shotRotation = 0.0;
	rotation = 0.0;
	isBallKicked = false;
	DrawGame();
}

void MainGame::ProcessInput()
{
	SDL_Event evnt;

	while (SDL_PollEvent(&evnt))
	{
		switch (evnt.type)
		{
		case SDL_QUIT:
			_gameState = GameState::EXIT;
			break;
		case SDL_KEYDOWN:
			switch (evnt.key.keysym.sym)
			{
			case SDLK_ESCAPE:
				_gameState = GameState::EXIT;
				break;
			case SDLK_RETURN:
				Update();
				break;
			case SDLK_r:
				RestartGame();
				break;
			case SDLK_SPACE:
				if (!isBallKicked) 
				{
					isBallKicked = true;
				}
				break;
			case SDLK_LEFT:
				if (rotation < 1.0) 
				{
					rotation += 0.01;
					std::cout << "Rotation: " << rotation << std::endl;
				}
				break;
			case SDLK_RIGHT:
				if (rotation > -1.0)
				{
					rotation -= 0.01f;
					std::cout << "Rotation: " << rotation << std::endl;
				}
				break;
			}
			break;
		}
	}
}


bool MainGame::Collision(glm::vec3 m1Pos, float m1Rad, glm::vec3 m2Pos, float m2Rad)
{
	float distance = glm::sqrt((m2Pos.x - m1Pos.x)*(m2Pos.x - m1Pos.x) + (m2Pos.y - m1Pos.y)*(m2Pos.y - m1Pos.y) + (m2Pos.z - m1Pos.z)*(m2Pos.z - m1Pos.z));

	if (distance < (m1Rad + m2Rad))
	{
		audioDevice->SetListener(myCamera.GetPosition(), m1Pos);
		PlayAudio(applause, m1Pos);
		isBallKicked = false;
		isGoal = true;
		return true;
	}
	else
	{
		return false;
	}
}

void MainGame::PlayAudio(unsigned int Source, glm::vec3 pos)
{
	
	ALint state; 
	alGetSourcei(Source, AL_SOURCE_STATE, &state);

	
	if (AL_PLAYING != state)
	{
		audioDevice->PlaySound(Source, pos);
	}
}

void MainGame::LinkBumpMapping()
{
	GLuint t1L = glGetUniformLocation(bumpShader.GetID(), "diffuse");
	GLuint t2L = glGetUniformLocation(bumpShader.GetID(), "normalT");

	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture2.GetID());
	glUniform1i(t1L, 0);

	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, texture2normal.GetID());
	glUniform1i(t2L, 1);
}

void MainGame::LevelHandler()
{
	if (isGoal)
	{
		if (level > 1.0)
		{
			level -= 1.0;
		}
		isGoal = false;
	}
}

void MainGame::DrawMenu()
{
	_gameDisplay->ClearDisplay(0.0, 0.0, 0.0, 1.0);

	Vertex vertices[] = { Vertex(glm::vec3(-1.0, 1.0, 0), glm::vec2(0.0, 1.0)),  
					Vertex(glm::vec3(1.0, 1.0, 0), glm::vec2(1.0, 1.0)),  
					Vertex(glm::vec3(-1.0, -1.0, 0), glm::vec2(0.0, 0.0)),
					Vertex(glm::vec3(-1.0, -1.0, 0), glm::vec2(0.0, 0.0)), 
					Vertex(glm::vec3(1.0, 1.0, 0), glm::vec2(1.0, 1.0)),   
					Vertex(glm::vec3(1.0, -1.0, 0), glm::vec2(1.0, 0.0))   
	};

	mesh3.LoadVertices(vertices, sizeof(vertices) / sizeof(vertices[0]));
	transform.SetPos(glm::vec3(0.0, 0.0, 0.0));
	transform.SetRot(glm::vec3(0.0, -0.5, 0.0));
	transform.SetScale(glm::vec3(4.0, 4.0, 4.0));
	bumpShader.Bind();
	bumpShader.Update(transform, myCamera);
	texture5.Bind(0);
	mesh3.DrawVertexes();
	myCamera.SetLook(*transform.GetPos());

	_gameDisplay->SwapBuffer();
}

void MainGame::DrawGame()
{
	_gameDisplay->ClearDisplay(0.0, 0.0, 0.0, 1.0);

	//Ball1
	transform.SetPos(glm::vec3(0.0 + shotRotation, -0.0, -6.0 + speed));
	transform.SetRot(glm::vec3(speed, 0.0, 0.0));
	transform.SetScale(glm::vec3(0.5, 0.5, 0.5));
	mesh1.UpdateSphereData(*transform.GetPos(), 0.62);
	texture1.Bind(0);
	ballShader.Bind();
	ballShader.Update(transform, myCamera);
	mesh1.Draw();

	myCamera.SetLook(*transform.GetPos());

	// Floor
	Vertex vertices[] = { Vertex(glm::vec3(-10.0, 10.0, 0), glm::vec2(0.0, 10.0)),
					Vertex(glm::vec3(10.0, 10.0, 0), glm::vec2(10.0, 10.0)),
					Vertex(glm::vec3(-10.0, -10.0, 0), glm::vec2(0.0, 0.0)),
					Vertex(glm::vec3(-10.0, -10.0, 0), glm::vec2(0.0, 0.0)),
					Vertex(glm::vec3(10.0, 10.0, 0), glm::vec2(10.0, 10.0)),
					Vertex(glm::vec3(10.0, -10.0, 0), glm::vec2(10.0, 0.0)) 
	};

	mesh3.LoadVertices(vertices, sizeof(vertices) / sizeof(vertices[0]));
	transform.SetPos(glm::vec3(0.0, -0.5, 0.0));
	transform.SetRot(glm::vec3(1.57, 0.0, 0.0));
	transform.SetScale(glm::vec3(1.0, 1.0, 1.0));
	bumpShader.Bind();
	bumpShader.Update(transform, myCamera);
	texture2.Bind(0);
	mesh3.DrawVertexes();

	// Arrow
	transform.SetPos(glm::vec3(0.0, 0.0, -8.0));
	transform.SetRot(glm::vec3(1.5 - rotation, -0.97, 0.0 - rotation));
	transform.SetScale(glm::vec3(0.5, 1.0, 0.5));
	bumpShader.Update(transform, myCamera);
	texture4.Bind(0);
	mesh4.Draw();

	if (isBallKicked)
	{
		speed += 0.08;
		shotRotation += (rotation * 0.06);
	}

	// Goal
	transform.SetPos(glm::vec3(-2.5 * level, -0.5 * level, 5.0 * level));
	transform.SetRot(glm::vec3(0.0, 0.0, 0.0));
	transform.SetScale(glm::vec3(0.01 * level, 0.01 * level, 0.01 * level));
	mesh2.UpdateSphereData(*transform.GetPos() + glm::vec3(2.5 * level, 0.0, 0.0), 2.0 * level);
	texture3.Bind(0);
	bumpShader.Update(transform, myCamera);
	mesh2.Draw();

	glEnableClientState(GL_COLOR_ARRAY); 
	glEnd();

	_gameDisplay->SwapBuffer();
} 